class JsonRPCClient{#a;#b;constructor(e,t={}){this.#a=e,this.#b={"Content-Type":"application/json",...t}}async call(e,t={},r=null,i={}){try{let s=await fetch(this.#a,{method:"POST",headers:{...this.#b,...i},body:JSON.stringify(this.serializeBigInts({jsonrpc:"2.0",method:e,params:t,id:r}))});if(!s.ok)throw Error(`HTTP Error: ${s.status} ${s.statusText}`);let n=await s.json();if(n.error)throw Error(`RPC Error: ${n.error.message} (Code: ${n.error.code})`);return this.deserializeBigInts(n.result)}catch(a){throw console.error("RPC call failed:",a),a}}serializeBigInts(e){return"bigint"==typeof e?e.toString():Array.isArray(e)?e.map(e=>this.serializeBigInts(e)):e&&"object"==typeof e?Object.fromEntries(Object.entries(e).map(([e,t])=>[e,this.serializeBigInts(t)])):e}deserializeBigInts(e){return"string"==typeof e&&/^\d+n?$/.test(e)?BigInt(e.replace(/n$/,"")):Array.isArray(e)?e.map(e=>this.deserializeBigInts(e)):e&&"object"==typeof e?Object.fromEntries(Object.entries(e).map(([e,t])=>[e,this.deserializeBigInts(t)])):e}}module.exports=JsonRPCClient;