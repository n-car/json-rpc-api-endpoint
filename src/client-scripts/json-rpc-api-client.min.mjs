export class JsonRPCClient{#a;#b;constructor(e,t={}){this.#a=e,this.#b={"Content-Type":"application/json",...t}}async call(e,t={},r=null,i={}){try{let s=await fetch(this.#a,{method:"POST",headers:{...this.#b,...i},body:JSON.stringify(this.serializeBigIntsAndDates({jsonrpc:"2.0",method:e,params:t,id:r}))});if(!s.ok)throw Error(`HTTP Error: ${s.status} ${s.statusText}`);let n=await s.json();if(console.dir(n),n.error)throw Error(`RPC Error: ${n.error.message} (Code: ${n.error.code})`);return this.deserializeBigIntsAndDates(n.result)}catch(a){throw console.error("RPC call failed:",a),a}}serializeBigIntsAndDates(e){if("bigint"==typeof e)return e.toString();if(Array.isArray(e))return e.map(e=>this.serializeBigIntsAndDates(e));if(e instanceof Date)return e.toISOString();if(e&&"object"==typeof e){let t={};for(let[r,i]of Object.entries(e))t[r]=this.serializeBigIntsAndDates(i);return t}return e}deserializeBigIntsAndDates(e){if("string"==typeof e){if(/^\d+n?$/.test(e))return BigInt(e.replace(/n$/,""));if(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z$/.test(e)){let t=new Date(e);if(!isNaN(t.getTime()))return t}}return Array.isArray(e)?e.map(e=>this.deserializeBigIntsAndDates(e)):e&&"object"==typeof e?Object.fromEntries(Object.entries(e).map(([e,t])=>[e,this.deserializeBigIntsAndDates(t),])):e}}